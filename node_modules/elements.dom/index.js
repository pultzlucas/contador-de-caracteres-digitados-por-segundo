const fs = require('fs')
let HTML
let iden
String.prototype.upperFirstChar = function () {
    const StringArr = this.split('').map((char, idx) =>
        idx > 0 ? char : char.toUpperCase())
    return StringArr.join('')
}

String.prototype.toClass = function () {
    const containsMoreNames = / +/.test(this)
    const clear = arr => arr.filter(e => e !== '')
    const concatDot = string => '.' + string

    const nameToClass = string => clear(string.split(' '))
        .map(name => concatDot(name)).join('')

    return containsMoreNames ? nameToClass(this) : concatDot(this)
}

String.prototype.toId = function () {
    return '#' + this
}

Array.prototype.toCamelCase = function () {
    const stringInCamelCase = this.map((string, index) =>
        index > 0 ? string.upperFirstChar() : string)
    return stringInCamelCase.join('')
}

function getFormatedNames(names) {
    return names.map(name => splitName(name).toCamelCase())
}

function containIden(iden, idArray) {
    return idArray.some(e => e === iden)
}

/* CLASS */

function getFormatedClasses(classes) {
    return classes.map(name => name.toClass())
}

function getSelectorString(name, className, mode = 'unique') {
    if (mode === 'unique') return `const ${name} = document.querySelector('${className}')\n`
    if (mode === 'multiple') return `const ${name} = document.querySelectorAll('${className}')\n`
}

function getAllNames(idens) {
    const allNames = ['html', 'body']

    const uniqueNames = getFormatedNames(getUniqueClasses())
    const multipleNames = getFormatedNames(getMultipleClasses())
    const idNames = getFormatedNames(getIdsFromHTML())

    if (containIden('class', idens)) allNames.push(...uniqueNames, ...multipleNames)
    if (containIden('id', idens)) allNames.push(...idNames)

    return allNames
}

function getClassesIndex() {
    const classRegex = RegExp(`class="`, 'gi')

    const classStart = Array.from(HTML.matchAll(classRegex)).map(match => match.index + 7)
    const classEnd = classStart.map(match => match + HTML.substring(match).indexOf('"'))

    const getColumn = i => [classStart, classEnd].map(arrIndex => arrIndex[i])
    const result = classStart.map((_, i) => getColumn(i))
    return result
}


function getClassesFromHTML() {
    const indexs = getClassesIndex()
    const classesName = indexs.map(([iStart, iEnd]) => HTML.substring(iStart, iEnd))
    return classesName
}

function getUniqueClasses() {
    const classes = getClassesFromHTML()
    const multipleClasses = getMultipleClasses()

    const notIsEqual = uClass => !multipleClasses.some(mClass => uClass === mClass)
    const cleanUniqueClasses = classes.filter(uClass => notIsEqual(uClass))
    return cleanUniqueClasses
}

function getMultipleClasses() {
    const repet = name => splitArray.reduce((acc, e) => e === name ? acc + 1 : acc, 0)

    const classes = getClassesFromHTML()
    const splitArray = classes.flatMap(string => string.split(' '))
    const noRepetArray = Array.from(new Set(splitArray))
    const repetedClasses = noRepetArray.filter((className) => repet(className) > 1)

    return repetedClasses
}

/* ID */

function getFormatedId(ids) {
    return ids.map(name => name.toId())
}


function getIdIndexs() {
    const iden = 'id'
    const idRegex = RegExp(`id="`, 'gi')

    const idStart = Array.from(HTML.matchAll(idRegex)).map(match => match.index + iden.length + 2)
    const idEnd = idStart.map(match => match + HTML.substring(match).indexOf('"'))

    const getColumn = i => [idStart, idEnd].map(arrIndex => arrIndex[i])

    const result = idStart.map((_, i) => getColumn(i))
    return result
}

function getIdsFromHTML() {
    const indexs = getIdIndexs()
    const idName = indexs.map(([iStart, iEnd]) => HTML.substring(iStart, iEnd))
    return idName
}

function clearFile(path) {
    fs.writeFileSync(path, '')
}

function concatExtension(fileName, extension) {
    const regex = RegExp(`.${extension}+`, 'gi')
    const cleanFilename = fileName.replace(regex, '')
    return cleanFilename + `.${extension}`
}

function splitName(name) {
    const classChars = RegExp(' +|-+|_+', 'gi')
    return name.replace(classChars, ' ').split(' ')
}


function exportSelectors(path, classes) {
    const data = ['export { ', ...classes.join(', '), ' }']
    data.forEach(string => fs.writeFileSync(path, string, { flag: 'a' }))
}

function writeSelectors(fileName, classObj, mode) {
    classObj.names.forEach((name, index) => fs.writeFileSync(
        fileName, getSelectorString(name, classObj.id[index], mode), { flag: 'a' }
    ))
}

function writeMainSelectors(fileName) {
    const body = {
        names: 'body',
        id: 'body'
    }

    const html = {
        names: 'html',
        id: 'html'
    }

    fs.writeFileSync(fileName, getSelectorString(html.names, html.id), { flag: 'a' })
    fs.writeFileSync(fileName, getSelectorString(body.names, body.id), { flag: 'a' })
}

function getIdenObjects() {
    const uniqueClasses = getUniqueClasses()
    const multipleClasses = getMultipleClasses()
    const ids = getIdsFromHTML()

    return {
        multiClassesObj: {
            names: getFormatedNames(multipleClasses),
            id: getFormatedClasses(multipleClasses)
        },

        uniqueClassesObj: {
            names: getFormatedNames(uniqueClasses),
            id: getFormatedClasses(uniqueClasses)
        },

        idsObj: {
            names: getFormatedNames(ids),
            id: getFormatedId(ids)
        }
    }
}


function generateElementsDOM(path, fileName, { exports = true, id = ['class', 'id'] }) {
    fileName = concatExtension(fileName, 'js')
    path = concatExtension(path, 'html')
    iden = id
    HTML = fs.readFileSync(path, 'utf8')

    clearFile(fileName)

    const { idsObj, multiClassesObj, uniqueClassesObj } = getIdenObjects()

    fs.writeFileSync(fileName, '// MAIN \n', { flag: 'a' })
    writeMainSelectors(fileName)

    if (containIden('id', id)) {
        fs.writeFileSync(fileName, '// ID \n', { flag: 'a' })
        writeSelectors(fileName, idsObj, 'unique')
    }


    if (containIden('class', id)) {
        fs.writeFileSync(fileName, '// CLASSES \n', { flag: 'a' })
        writeSelectors(fileName, multiClassesObj, 'multiple')
        writeSelectors(fileName, uniqueClassesObj, 'unique')
    }

    if (exports) exportSelectors(fileName, getAllNames(id))
}

module.exports = generateElementsDOM